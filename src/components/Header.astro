---
import logoImage from '../content/press/journalfoundation.png';

const currentPath = Astro.url.pathname;
---

<header class="site-header" data-nav-state="closed">
  <div class="container site-header__inner">
    <a href="/" class="logo">
      <img
        class="logo-image"
        src={logoImage.src}
        width={logoImage.width}
        height={logoImage.height}
        alt="Journal Foundation logo"
        loading="eager"
        decoding="async"
      />
      <span class="logo-label">Journal Foundation</span>
    </a>

    <button
      class="menu-toggle"
      type="button"
      aria-expanded="false"
      aria-controls="primary-navigation"
    >
      <span class="menu-toggle__icon" aria-hidden="true"></span>
      <span class="menu-toggle__label">Menu</span>
    </button>

    <nav id="primary-navigation" class="primary-nav" aria-label="Primary navigation">
      <ul class="primary-nav__list">
        <li>
          <a
            href="/who-we-are"
            class:list={[{ active: currentPath === '/who-we-are' }]}
          >
            Who We Are
          </a>
        </li>
        <li>
          <a
            href="/what-we-do"
            class:list={[{ active: currentPath === '/what-we-do' }]}
          >
            What We Do
          </a>
        </li>
        <li><a href="/journalnet" class:list={[{ active: currentPath === '/journalnet' }]}>JournalNet</a></li>
        <li><a href="/learn" class:list={[{ active: currentPath.startsWith('/learn') }]}>Learn</a></li>
        <li><a href="/build" class:list={[{ active: currentPath === '/build' }]}>Build</a></li>

      </ul>
    </nav>
  </div>
</header>

<script is:inline>
  if (typeof window !== 'undefined') {
    const header = document.querySelector('.site-header');
    const toggle = header?.querySelector('.menu-toggle');
    const nav = header?.querySelector('#primary-navigation');
    const focusableSelectors = 'a[href], button:not([disabled])';

    const mq = window.matchMedia('(max-width: 960px)');

    const setNavHidden = (hidden) => {
      if (!nav || !toggle || !header) return;
      if (hidden) {
        nav.setAttribute('hidden', '');
        header.dataset.navState = 'closed';
        toggle.setAttribute('aria-expanded', 'false');
      } else {
        nav.removeAttribute('hidden');
        header.dataset.navState = 'open';
        toggle.setAttribute('aria-expanded', 'true');
      }
    };

    const syncToViewport = (event) => {
      if (!nav || !toggle) return;
      if (event.matches) {
        if (toggle.getAttribute('aria-expanded') === 'false') {
          setNavHidden(true);
        }
      } else {
        nav.removeAttribute('hidden');
        header?.setAttribute('data-nav-state', 'desktop');
        toggle.setAttribute('aria-expanded', 'false');
      }
    };

    const openNav = () => {
      setNavHidden(false);
      const firstLink = nav?.querySelector('a');
      firstLink?.focus();
    };

    const closeNav = () => {
      setNavHidden(true);
      toggle?.focus();
    };

    toggle?.addEventListener('click', () => {
      const expanded = toggle.getAttribute('aria-expanded') === 'true';
      if (expanded) {
        closeNav();
      } else {
        openNav();
      }
    });

    nav?.addEventListener('click', (event) => {
      if (event.target instanceof HTMLAnchorElement && mq.matches) {
        closeNav();
      }
    });

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && toggle?.getAttribute('aria-expanded') === 'true') {
        closeNav();
      }
    });

    const trapFocus = (event) => {
      if (toggle?.getAttribute('aria-expanded') !== 'true' || !nav || !mq.matches) return;
      const focusableEls = nav.querySelectorAll(focusableSelectors);
      if (focusableEls.length === 0) return;
      const first = focusableEls[0];
      const last = focusableEls[focusableEls.length - 1];
      if (event.key === 'Tab') {
        if (event.shiftKey && document.activeElement === first) {
          event.preventDefault();
          last.focus();
        } else if (!event.shiftKey && document.activeElement === last) {
          event.preventDefault();
          toggle.focus();
        }
      }
    };

    document.addEventListener('keydown', trapFocus);
    if (typeof mq.addEventListener === 'function') {
      mq.addEventListener('change', syncToViewport);
    } else if (typeof mq.addListener === 'function') {
      mq.addListener(syncToViewport);
    }
    syncToViewport(mq);
  }
</script>

<style>
  .site-header {
    padding-block: var(--space-lg);
    border-bottom: 1px solid var(--color-border-subtle);
    position: relative;
    background: rgba(5, 7, 10, 0.65);
    backdrop-filter: blur(14px);
    z-index: var(--z-header, 50);
  }

  .site-header__inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--space-sm);
  }

  .logo {
    display: inline-flex;
    align-items: center;
    gap: var(--space-2xs);
    color: var(--color-text-primary);
    font-weight: 700;
    font-size: var(--step-1);
    text-decoration: none;
    letter-spacing: -0.01em;
  }

  .logo:hover {
    color: var(--color-text-primary);
  }

  .logo-image {
    display: block;
    width: clamp(40px, 4vw, 52px);
    height: auto;
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-sm);
    background-color: var(--color-surface); /* ensure transparent edges blend well */
  }

  .menu-toggle {
    display: none;
    align-items: center;
    gap: var(--space-3xs);
    background: transparent;
    color: var(--color-text-primary);
    border: 1px solid var(--color-border-strong);
    border-radius: var(--radius-pill);
    padding: calc(var(--space-3xs) + 2px) var(--space-sm);
    font-weight: 600;
    cursor: pointer;
    transition: background-color var(--duration-base) var(--easing-standard),
      color var(--duration-base) var(--easing-standard),
      border-color var(--duration-base) var(--easing-standard);
  }

  .menu-toggle:focus-visible {
    outline: none;
    box-shadow: 0 0 0 4px rgba(45, 125, 255, 0.4);
  }

  .menu-toggle__icon {
    display: inline-block;
    position: relative;
    width: 18px;
    height: 2px;
    background: currentColor;
    box-shadow: 0 6px 0 currentColor, 0 -6px 0 currentColor;
  }

  .menu-toggle__label {
    font-size: var(--step--1);
    text-transform: uppercase;
    letter-spacing: 0.08em;
  }

  .primary-nav {
    display: flex;
    align-items: center;
  }

  .primary-nav__list {
    display: flex;
    gap: clamp(var(--space-2xs), 2vw, var(--space-lg));
    list-style: none;
  }

  .primary-nav__list a {
    color: var(--color-text-secondary);
    font-weight: 600;
    padding-block: var(--space-3xs);
  }

  .primary-nav__list a.active,
  .primary-nav__list a:hover {
    color: var(--color-text-primary);
  }

  @media (max-width: 960px) {
    .site-header__inner {
      align-items: flex-start;
    }

    .menu-toggle {
      display: inline-flex;
    }

    .primary-nav {
      position: absolute;
      top: calc(100% + var(--space-2xs));
      right: var(--space-md);
      left: var(--space-md);
      background: rgba(17, 24, 33, 0.95);
      border: 1px solid var(--color-border-strong);
      border-radius: var(--radius-lg);
      padding: var(--space-sm);
      box-shadow: var(--shadow-lg);
      display: flex;
    }

    .primary-nav[hidden] {
      display: none;
    }

    .primary-nav__list {
      flex-direction: column;
      gap: var(--space-2xs);
      width: 100%;
    }

    .primary-nav__list a {
      display: block;
      width: 100%;
      padding: var(--space-3xs) var(--space-2xs);
      border-radius: var(--radius-md);
    }

    .primary-nav__list a:focus-visible,
    .primary-nav__list a:hover {
      background: rgba(45, 125, 255, 0.12);
    }
  }
</style>
