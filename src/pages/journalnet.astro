---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout
  title="JournalNet â€” Journal Foundation"
  description="A network where privacy is default. Apps don't own your data."
>
  <main class="journalnet-page">
    
    <section class="hero">
      <div class="container">
        <h1>JournalNet</h1>
        <p class="definition">
          A network where apps request access to data they don't host.
        </p>
      </div>
    </section>

    <section class="network-viz">
      <div class="container">
        <div id="graph-container"></div>
        <div class="graph-legend">
          <span class="legend-item">
            <span class="dot vault"></span> Vaults (user-controlled storage)
          </span>
          <span class="legend-item">
            <span class="dot app"></span> Apps (request capabilities)
          </span>
          <span class="legend-item">
            <span class="dot relay"></span> Blind relays (metadata protection)
          </span>
        </div>
      </div>
    </section>

    <section class="explainer">
      <div class="container">
        <div class="explainer-grid">
          <div>
            <h2>Vaults</h2>
            <p>Encrypted storage. You control it.</p>
          </div>
          <div>
            <h2>Capabilities</h2>
            <p>Temporary, scoped, revocable access tokens.</p>
          </div>
          <div>
            <h2>Apps</h2>
            <p>Swappable interfaces. Data stays in your vault.</p>
          </div>
        </div>
      </div>
    </section>

    <section class="principles">
      <div class="container">
        <h2>Three Principles</h2>
        <ol>
          <li>Apps don't custody your data</li>
          <li>Metadata is minimized by default</li>
          <li>Access is capability-based, not credential-based</li>
        </ol>
      </div>
    </section>

    <section class="cta">
      <div class="container">
        <h2>Build on JournalNet</h2>
        <div class="cta-actions">
          <a href="/stack" class="btn btn--primary">See the protocol stack</a>
          <a href="/docs" class="btn btn--secondary">Start building</a>
        </div>
      </div>
    </section>

  </main>
</BaseLayout>

<script>
  import ForceGraph from 'force-graph';

  const container = document.getElementById('graph-container');
  if (container) {

    // Generate network data
    const numVaults = 8;
    const numApps = 5;
    const numRelays = 3;

    const createNodes = (count, type, labelPrefix) =>
      Array.from({ length: count }, (_, i) => ({
        id: `${type}-${i}`,
        type,
        label: `${labelPrefix} ${i + 1}`
      }));

    const addLayerPositions = (nodes, x) => {
      const centerOffset = (nodes.length - 1) / 2;
      return nodes.map((node, index) => ({
        ...node,
        fx: x,
        fy: (index - centerOffset) * 80 + (Math.random() - 0.5) * 30,
        pulseOffset: Math.random() * Math.PI * 2
      }));
    };

    const vaults = addLayerPositions(createNodes(numVaults, 'vault', 'Vault'), 240);
    const relays = addLayerPositions(createNodes(numRelays, 'relay', 'Relay'), 0);
    const apps = addLayerPositions(createNodes(numApps, 'app', 'App'), -240);

    const nodes = [...apps, ...relays, ...vaults];

    // Create connections: apps -> relays -> vaults
    const links = [];

    const createFlow = (sourceSet, targetSet, minConnections, maxConnections) => {
      sourceSet.forEach(source => {
        const connectionCount = Math.floor(Math.random() * (maxConnections - minConnections + 1)) + minConnections;
        const connectedTargets = [...targetSet]
          .sort(() => Math.random() - 0.5)
          .slice(0, connectionCount);

        connectedTargets.forEach(target => {
          links.push({
            source: source.id,
            target: target.id,
            speed: 0.002 + Math.random() * 0.004
          });
        });
      });
    };

    createFlow(apps, relays, 1, 2);
    createFlow(relays, vaults, 2, 4);

    const data = { nodes, links };

    const typeColors = {
      vault: '#0dd280',
      app: '#2d7dff',
      relay: '#f5b400'
    };

    const hexToRgb = (hex) => {
      const sanitized = hex.replace('#', '');
      const bigint = parseInt(sanitized, 16);
      const r = (bigint >> 16) & 255;
      const g = (bigint >> 8) & 255;
      const b = bigint & 255;
      return `${r}, ${g}, ${b}`;
    };

    const Graph = ForceGraph()(container)
      .graphData(data)
      .backgroundColor('#05070a')
      .nodeLabel('label')
      .linkColor(() => 'rgba(255, 255, 255, 0.2)')
      .linkWidth(1.5)
      .linkDirectionalParticles(4)
      .linkDirectionalParticleWidth(3)
      .linkDirectionalParticleColor(() => 'rgba(255, 255, 255, 0.85)')
      .linkDirectionalParticleSpeed(link => link.speed)
      .nodeRelSize(6)
      .width(container.clientWidth)
      .height(500);

    Graph.nodeCanvasObject((node, ctx, globalScale) => {
      const color = typeColors[node.type] ?? '#888888';
      const baseRadius = 6;
      const time = Date.now();
      const pulse = (Math.sin((time / 500) + (node.pulseOffset ?? 0)) + 1) / 2;
      const pulseRadius = baseRadius + pulse * 4;

      ctx.beginPath();
      ctx.arc(node.x, node.y, pulseRadius, 0, Math.PI * 2, false);
      ctx.fillStyle = `rgba(${hexToRgb(color)}, 0.2)`;
      ctx.fill();

      ctx.beginPath();
      ctx.arc(node.x, node.y, baseRadius, 0, Math.PI * 2, false);
      ctx.fillStyle = color;
      ctx.fill();

      if (globalScale > 1.4) {
        ctx.font = `${12 / globalScale}px var(--font-sans, 'Inter', sans-serif)`;
        ctx.fillStyle = '#ffffff';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'top';
        ctx.fillText(node.label, node.x, node.y + baseRadius + 4);
      }
    });

    Graph.nodeCanvasObjectMode(() => 'replace');
    Graph.autoPauseRedraw(false);
    Graph.d3Force('link').distance(140).strength(1);
    Graph.d3Force('charge').strength(-180);

    const resizeObserver = new ResizeObserver(entries => {
      for (const entry of entries) {
        const { width } = entry.contentRect;
        Graph.width(width);
        Graph.refresh();
      }
    });

    resizeObserver.observe(container);

    const animate = () => {
      Graph.refresh();
      requestAnimationFrame(animate);
    };

    animate();
  }
</script>

<style>
  .journalnet-page {
    padding-bottom: var(--space-3xl);
  }

  .hero {
    padding: var(--space-3xl) 0 var(--space-2xl);
    text-align: center;
  }

  .hero h1 {
    margin-bottom: var(--space-md);
  }

  .definition {
    font-size: var(--step-1);
    color: var(--color-text-secondary);
    max-width: 60ch;
    margin: 0 auto;
  }

  .network-viz {
    padding: var(--space-2xl) 0;
    background: rgba(17, 24, 33, 0.35);
  }

  #graph-container {
    width: 100%;
    height: 500px;
    border-radius: var(--radius-lg);
    overflow: hidden;
    background: var(--color-surface-void);
    border: 1px solid var(--color-border-subtle);
  }

  .graph-legend {
    display: flex;
    gap: var(--space-lg);
    justify-content: center;
    margin-top: var(--space-md);
    flex-wrap: wrap;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: var(--space-2xs);
    color: var(--color-text-secondary);
    font-size: var(--step--1);
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .dot.vault {
    background: #0dd280;
  }

  .dot.app {
    background: #2d7dff;
  }

  .dot.relay {
    background: #f5b400;
  }

  .explainer {
    padding: var(--space-3xl) 0;
  }

  .explainer-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-xl);
    text-align: center;
  }

  .explainer-grid h2 {
    margin-bottom: var(--space-xs);
    font-size: var(--step-1);
  }

  .explainer-grid p {
    color: var(--color-text-secondary);
    margin: 0;
  }

  .principles {
    padding: var(--space-3xl) 0;
    background: rgba(17, 24, 33, 0.35);
  }

  .principles h2 {
    text-align: center;
    margin-bottom: var(--space-xl);
  }

  .principles ol {
    max-width: 60ch;
    margin: 0 auto;
    font-size: var(--step-0);
    line-height: 2;
    color: var(--color-text-secondary);
  }

  .cta {
    padding: var(--space-3xl) 0;
    text-align: center;
  }

  .cta h2 {
    margin-bottom: var(--space-lg);
  }

  .cta-actions {
    display: flex;
    gap: var(--space-sm);
    justify-content: center;
    flex-wrap: wrap;
  }

  .cta-actions .btn {
    min-width: 200px;
  }
</style>