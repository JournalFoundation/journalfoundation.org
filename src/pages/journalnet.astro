---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout
  title="JournalNet â€” Journal Foundation"
  description="A network where privacy is default. Apps don't own your data."
>
  <main class="journalnet-page">
    
    <section class="hero">
      <div class="container">
        <h1>JournalNet</h1>
        <p class="definition">
          A network where apps request access to data they don't host.
        </p>
      </div>
    </section>

    <section class="network-viz">
      <div class="container">
        <div id="graph-container"></div>
        <div class="graph-legend">
          <span class="legend-item">
            <span class="dot vault"></span> Vaults (user-controlled storage)
          </span>
          <span class="legend-item">
            <span class="dot app"></span> Apps (request capabilities)
          </span>
          <span class="legend-item">
            <span class="dot cipherlot"></span> Cipherlots (metadata protection)
          </span>
        </div>
      </div>
    </section>

    <section class="explainer">
      <div class="container">
        <div class="explainer-grid">
          <div>
            <h2>Vaults</h2>
            <p>Encrypted storage. You control it.</p>
          </div>
          <div>
            <h2>Capabilities</h2>
            <p>Temporary, scoped, revocable access tokens.</p>
          </div>
          <div>
            <h2>Apps</h2>
            <p>Swappable interfaces. Data stays in your vault.</p>
          </div>
        </div>
      </div>
    </section>

    <section class="principles">
      <div class="container">
        <h2>Three Principles</h2>
        <ol>
          <li>Apps don't custody your data</li>
          <li>Metadata is minimized by default</li>
          <li>Access is capability-based, not credential-based</li>
        </ol>
      </div>
    </section>

    <section class="cta">
      <div class="container">
        <h2>Build on JournalNet</h2>
        <div class="cta-actions">
          <a href="/stack" class="btn btn--primary">See the protocol stack</a>
          <a href="/docs" class="btn btn--secondary">Start building</a>
        </div>
      </div>
    </section>

  </main>
</BaseLayout>

<script>
  import ForceGraph from 'force-graph';

  const container = document.getElementById('graph-container');
  if (container) {
    
    // Generate network data
    const numVaults = 10;
    const numApps = 6;
    const numCipherlots = 6;

    const vaults = Array.from({length: numVaults}, (_, i) => ({
      id: `vault-${i}`,
      type: 'vault',
      label: `Vault ${i + 1}`
    }));

    const apps = Array.from({length: numApps}, (_, i) => ({
      id: `app-${i}`,
      type: 'app',
      label: `App ${i + 1}`
    }));

    const cipherlots = Array.from({length: numCipherlots}, (_, i) => ({
      id: `cipherlot-${i}`,
      type: 'cipherlot',
      label: `Cipherlot ${i + 1}`
    }));

    const nodes = [...apps, ...cipherlots, ...vaults];

    // Organic relationship map between vaults, cipherlots, and apps
    const cipherlotRelationships = [
      { id: 'cipherlot-0', apps: [0, 1, 3], vaults: [0, 1, 4] },
      { id: 'cipherlot-1', apps: [1, 2, 4], vaults: [2, 5] },
      { id: 'cipherlot-2', apps: [0, 2, 5], vaults: [1, 3, 6, 7] },
      { id: 'cipherlot-3', apps: [3], vaults: [3, 8] },
      { id: 'cipherlot-4', apps: [4, 5], vaults: [4, 6, 8] },
      { id: 'cipherlot-5', apps: [2, 5], vaults: [] }
    ];

    const links = cipherlotRelationships.flatMap(({ id, apps: connectedApps, vaults: connectedVaults }) => [
      ...connectedApps.map(appIndex => ({
        source: `app-${appIndex}`,
        target: id
      })),
      ...connectedVaults.map(vaultIndex => ({
        source: id,
        target: `vault-${vaultIndex}`
      }))
    ]);

    const data = { nodes, links };

    const connectionCounts = links.reduce((acc, link) => {
      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
      const targetId = typeof link.target === 'object' ? link.target.id : link.target;
      acc[sourceId] = (acc[sourceId] || 0) + 1;
      acc[targetId] = (acc[targetId] || 0) + 1;
      return acc;
    }, {});

    const layerColors = {
      app: '#2d7dff',
      cipherlot: '#f5b400',
      vault: '#0dd280'
    };

    const nodeTypeLookup = Object.fromEntries(nodes.map(node => [node.id, node.type]));

    const Graph = ForceGraph()(container)
      .graphData(data)
      .nodeId('id')
      .nodeLabel('label')
      .backgroundColor('#05070a')
      .width(container.clientWidth)
      .height(520)
      .nodeCanvasObject((node, ctx) => {
        const baseRadius = 9;
        const connections = connectionCounts[node.id] || 0;
        const radius = baseRadius + Math.min(connections, 5);
        const pulse = (Math.sin(Date.now() / 400) + 1) / 2; // 0 -> 1
        const glowRadius = radius + pulse * 6;

        ctx.beginPath();
        ctx.arc(node.x, node.y, glowRadius, 0, 2 * Math.PI, false);
        ctx.fillStyle = `${layerColors[node.type]}22`;
        ctx.fill();

        ctx.beginPath();
        ctx.arc(node.x, node.y, radius + 3, 0, 2 * Math.PI, false);
        ctx.strokeStyle = `${layerColors[node.type]}55`;
        ctx.lineWidth = 1.5;
        ctx.stroke();

        ctx.beginPath();
        ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI, false);
        ctx.fillStyle = layerColors[node.type];
        ctx.fill();
      })
      .linkColor(link => {
        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
        const type = nodeTypeLookup[sourceId] || 'app';
        return `${layerColors[type]}33`;
      })
      .linkWidth(link => {
        const targetId = typeof link.target === 'object' ? link.target.id : link.target;
        const type = nodeTypeLookup[targetId] || 'vault';
        return type === 'vault' ? 2.4 : 1.6;
      })
      .linkCurvature(0.35)
      .linkDirectionalParticles(4)
      .linkDirectionalParticleWidth(2.5)
      .linkDirectionalParticleSpeed(link => {
        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
        return nodeTypeLookup[sourceId] === 'app' ? 0.016 : 0.009;
      })
      .cooldownTicks(320);

    const hashNumber = text => {
      let hash = 0;
      for (let i = 0; i < text.length; i += 1) {
        hash = (hash << 5) - hash + text.charCodeAt(i);
        hash |= 0;
      }
      return Math.abs(hash);
    };

    const goldenAngle = Math.PI * (3 - Math.sqrt(5));
    nodes.forEach((node, index) => {
      const radius = 120 + (hashNumber(node.id) % 80);
      const angle = index * goldenAngle;
      node.x = Math.cos(angle) * radius;
      node.y = Math.sin(angle) * radius;
    });

    const chargeForce = Graph.d3Force('charge');
    if (chargeForce) {
      chargeForce.strength(-160);
    }

    const linkForce = Graph.d3Force('link');
    if (linkForce) {
      linkForce.distance(link => 110 + (hashNumber(`${link.source}-${link.target}`) % 90));
      linkForce.strength(link => (nodeTypeLookup[typeof link.source === 'object' ? link.source.id : link.source] === 'app' ? 0.08 : 0.12));
    }

    let zoomedToFit = false;
    Graph.onEngineStop(() => {
      if (!zoomedToFit) {
        zoomedToFit = true;
        Graph.zoomToFit(400, 100);
      }
    });

    let resizeRaf;
    const queueZoomToFit = () => {
      if (!zoomedToFit) return;
      if (resizeRaf) {
        cancelAnimationFrame(resizeRaf);
      }
      resizeRaf = requestAnimationFrame(() => {
        Graph.zoomToFit(400, 100);
      });
    };

    if ('ResizeObserver' in window) {
      const resizeObserver = new ResizeObserver(entries => {
        for (const entry of entries) {
          const { width } = entry.contentRect;
          Graph.width(width);
          queueZoomToFit();
        }
      });

      resizeObserver.observe(container);
    } else {
      window.addEventListener('resize', () => {
        Graph.width(container.clientWidth);
        queueZoomToFit();
      });
    }
  }
</script>

<style>
  .journalnet-page {
    padding-bottom: var(--space-3xl);
  }

  .hero {
    padding: var(--space-3xl) 0 var(--space-2xl);
    text-align: center;
  }

  .hero h1 {
    margin-bottom: var(--space-md);
  }

  .definition {
    font-size: var(--step-1);
    color: var(--color-text-secondary);
    max-width: 60ch;
    margin: 0 auto;
  }

  .network-viz {
    padding: var(--space-2xl) 0;
    background: rgba(17, 24, 33, 0.35);
  }

  #graph-container {
    width: 100%;
    height: 520px;
    border-radius: var(--radius-lg);
    overflow: hidden;
    background: var(--color-surface-void);
    border: 1px solid var(--color-border-subtle);
  }

  .graph-legend {
    display: flex;
    gap: var(--space-lg);
    justify-content: center;
    margin-top: var(--space-md);
    flex-wrap: wrap;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: var(--space-2xs);
    color: var(--color-text-secondary);
    font-size: var(--step--1);
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .dot.vault {
    background: #0dd280;
  }

  .dot.app {
    background: #2d7dff;
  }

  .dot.cipherlot {
    background: #f5b400;
  }

  .explainer {
    padding: var(--space-3xl) 0;
  }

  .explainer-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-xl);
    text-align: center;
  }

  .explainer-grid h2 {
    margin-bottom: var(--space-xs);
    font-size: var(--step-1);
  }

  .explainer-grid p {
    color: var(--color-text-secondary);
    margin: 0;
  }

  .principles {
    padding: var(--space-3xl) 0;
    background: rgba(17, 24, 33, 0.35);
  }

  .principles h2 {
    text-align: center;
    margin-bottom: var(--space-xl);
  }

  .principles ol {
    max-width: 60ch;
    margin: 0 auto;
    font-size: var(--step-0);
    line-height: 2;
    color: var(--color-text-secondary);
  }

  .cta {
    padding: var(--space-3xl) 0;
    text-align: center;
  }

  .cta h2 {
    margin-bottom: var(--space-lg);
  }

  .cta-actions {
    display: flex;
    gap: var(--space-sm);
    justify-content: center;
    flex-wrap: wrap;
  }

  .cta-actions .btn {
    min-width: 200px;
  }
</style>