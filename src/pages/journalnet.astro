---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout
  title="JournalNet â€” Journal Foundation"
  description="A network where privacy is default. Apps don't own your data."
>
  <main class="journalnet-page">
    
    <section class="hero">
      <div class="container">
        <h1>JournalNet</h1>
        <p class="definition">
          A network where apps request access to data they don't host.
        </p>
      </div>
    </section>

    <section class="network-viz">
      <div class="container">
        <div id="graph-container"></div>
        <div class="graph-legend">
          <span class="legend-item">
            <span class="dot vault"></span> Vaults (user-controlled storage)
          </span>
          <span class="legend-item">
            <span class="dot app"></span> Apps (request capabilities)
          </span>
          <span class="legend-item">
            <span class="dot relay"></span> Blind relays (metadata protection)
          </span>
        </div>
      </div>
    </section>

    <section class="explainer">
      <div class="container">
        <div class="explainer-grid">
          <div>
            <h2>Vaults</h2>
            <p>Encrypted storage. You control it.</p>
          </div>
          <div>
            <h2>Capabilities</h2>
            <p>Temporary, scoped, revocable access tokens.</p>
          </div>
          <div>
            <h2>Apps</h2>
            <p>Swappable interfaces. Data stays in your vault.</p>
          </div>
        </div>
      </div>
    </section>

    <section class="principles">
      <div class="container">
        <h2>Three Principles</h2>
        <ol>
          <li>Apps don't custody your data</li>
          <li>Metadata is minimized by default</li>
          <li>Access is capability-based, not credential-based</li>
        </ol>
      </div>
    </section>

    <section class="cta">
      <div class="container">
        <h2>Build on JournalNet</h2>
        <div class="cta-actions">
          <a href="/stack" class="btn btn--primary">See the protocol stack</a>
          <a href="/docs" class="btn btn--secondary">Start building</a>
        </div>
      </div>
    </section>

  </main>
</BaseLayout>

<script>
  import ForceGraph from 'force-graph';

  const container = document.getElementById('graph-container');
  if (container) {
    
    // Generate network data
    const numVaults = 8;
    const numApps = 5;
    const numRelays = 3;
    
    const vaults = Array.from({length: numVaults}, (_, i) => ({
      id: `vault-${i}`,
      type: 'vault',
      label: `Vault ${i + 1}`
    }));
    
    const apps = Array.from({length: numApps}, (_, i) => ({
      id: `app-${i}`,
      type: 'app',
      label: `App ${i + 1}`
    }));
    
    const relays = Array.from({length: numRelays}, (_, i) => ({
      id: `relay-${i}`,
      type: 'relay',
      label: `Relay ${i + 1}`
    }));
    
    const nodes = [...apps, ...relays, ...vaults];

    // Arrange nodes into visual layers (apps -> relays -> vaults)
    const layerSpacing = 170;
    const horizontalSpacing = 140;

    const positionLayer = (layerNodes, layerIndex) => {
      const offset = (layerNodes.length - 1) / 2;
      layerNodes.forEach((node, index) => {
        node.fx = (index - offset) * horizontalSpacing;
        node.fy = (layerIndex - 1) * layerSpacing;
      });
    };

    positionLayer(apps, 0);
    positionLayer(relays, 1);
    positionLayer(vaults, 2);

    // Deterministic connections: apps -> relays -> vaults to highlight the flow
    const links = [];

    apps.forEach((app, index) => {
      const relay = relays[index % relays.length];
      links.push({ source: app.id, target: relay.id });
    });

    relays.forEach((relay, index) => {
      const firstVaultIndex = (index * 2) % vaults.length;
      const connectedVaults = [
        vaults[firstVaultIndex],
        vaults[(firstVaultIndex + 1) % vaults.length]
      ];

      connectedVaults.forEach(vault => {
        links.push({ source: relay.id, target: vault.id });
      });
    });

    const data = { nodes, links };

    const layerColors = {
      app: '#2d7dff',
      relay: '#f5b400',
      vault: '#0dd280'
    };

    const nodeTypeLookup = Object.fromEntries(nodes.map(node => [node.id, node.type]));

    const Graph = ForceGraph()(container)
      .graphData(data)
      .nodeId('id')
      .nodeLabel('label')
      .backgroundColor('#05070a')
      .width(container.clientWidth)
      .height(500)
      .nodeCanvasObject((node, ctx) => {
        const radius = 12;
        const pulse = (Math.sin(Date.now() / 400) + 1) / 2; // 0 -> 1
        const glowRadius = radius + pulse * 6;

        ctx.beginPath();
        ctx.arc(node.x, node.y, glowRadius, 0, 2 * Math.PI, false);
        ctx.fillStyle = `${layerColors[node.type]}22`;
        ctx.fill();

        ctx.beginPath();
        ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI, false);
        ctx.fillStyle = layerColors[node.type];
        ctx.fill();
      })
      .linkColor(link => {
        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
        const type = nodeTypeLookup[sourceId] || 'app';
        return `${layerColors[type]}33`;
      })
      .linkWidth(2)
      .linkDirectionalParticles(3)
      .linkDirectionalParticleWidth(3)
      .linkDirectionalParticleSpeed(() => 0.012)
      .cooldownTicks(0);

    const chargeForce = Graph.d3Force('charge');
    if (chargeForce) {
      chargeForce.strength(-80);
    }

    // Ensure positions remain layered and respond to resize
    Graph.onEngineStop(() => {
      nodes.forEach(node => {
        node.fx = node.x;
        node.fy = node.y;
      });
    });

    if ('ResizeObserver' in window) {
      const resizeObserver = new ResizeObserver(entries => {
        for (const entry of entries) {
          const { width } = entry.contentRect;
          Graph.width(width);
        }
      });

      resizeObserver.observe(container);
    } else {
      window.addEventListener('resize', () => {
        Graph.width(container.clientWidth);
      });
    }
  }
</script>

<style>
  .journalnet-page {
    padding-bottom: var(--space-3xl);
  }

  .hero {
    padding: var(--space-3xl) 0 var(--space-2xl);
    text-align: center;
  }

  .hero h1 {
    margin-bottom: var(--space-md);
  }

  .definition {
    font-size: var(--step-1);
    color: var(--color-text-secondary);
    max-width: 60ch;
    margin: 0 auto;
  }

  .network-viz {
    padding: var(--space-2xl) 0;
    background: rgba(17, 24, 33, 0.35);
  }

  #graph-container {
    width: 100%;
    height: 500px;
    border-radius: var(--radius-lg);
    overflow: hidden;
    background: var(--color-surface-void);
    border: 1px solid var(--color-border-subtle);
  }

  .graph-legend {
    display: flex;
    gap: var(--space-lg);
    justify-content: center;
    margin-top: var(--space-md);
    flex-wrap: wrap;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: var(--space-2xs);
    color: var(--color-text-secondary);
    font-size: var(--step--1);
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .dot.vault {
    background: #0dd280;
  }

  .dot.app {
    background: #2d7dff;
  }

  .dot.relay {
    background: #f5b400;
  }

  .explainer {
    padding: var(--space-3xl) 0;
  }

  .explainer-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-xl);
    text-align: center;
  }

  .explainer-grid h2 {
    margin-bottom: var(--space-xs);
    font-size: var(--step-1);
  }

  .explainer-grid p {
    color: var(--color-text-secondary);
    margin: 0;
  }

  .principles {
    padding: var(--space-3xl) 0;
    background: rgba(17, 24, 33, 0.35);
  }

  .principles h2 {
    text-align: center;
    margin-bottom: var(--space-xl);
  }

  .principles ol {
    max-width: 60ch;
    margin: 0 auto;
    font-size: var(--step-0);
    line-height: 2;
    color: var(--color-text-secondary);
  }

  .cta {
    padding: var(--space-3xl) 0;
    text-align: center;
  }

  .cta h2 {
    margin-bottom: var(--space-lg);
  }

  .cta-actions {
    display: flex;
    gap: var(--space-sm);
    justify-content: center;
    flex-wrap: wrap;
  }

  .cta-actions .btn {
    min-width: 200px;
  }
</style>